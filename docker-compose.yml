version: '3.8'

services:
  # PostgreSQL数据库
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: personal_blog
      POSTGRES_USER: blog_user
      POSTGRES_PASSWORD: your_secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - blog_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blog_user -d personal_blog"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存 (可选)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - blog_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django后端
  backend:
    build:
      context: ./recipeServerPython
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DEBUG=False
      - SECRET_KEY=your-production-secret-key-here
      - DB_NAME=personal_blog
      - DB_USER=blog_user
      - DB_PASSWORD=your_secure_password
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,your-domain.com
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - blog_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React前端
  frontend:
    build:
      context: ./recipeServerWeb
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=http://localhost/api/v1
    restart: unless-stopped
    networks:
      - blog_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL证书目录
    depends_on:
      - backend
      - frontend
    networks:
      - blog_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  blog_network:
    driver: bridge 